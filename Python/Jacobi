import numpy as np
import pandas as pd

def jacobi(A, b, x0, tol, max_iterations):
    n = len(A)
    x = x0.copy()
    x_new = np.zeros(n)
    error = np.inf
    iteration = 0
    table_data = []

    # Calcular la matriz T y el vector c / Calculate Matrix T and C Vector
    D = np.diag(np.diag(A))
    R = A - D
    T = -np.linalg.inv(D).dot(R)
    c = np.linalg.inv(D).dot(b)

    # Calcular el radio espectral
    spectral_radius = np.max(np.abs(np.linalg.eigvals(T)))

    while error > tol and iteration < max_iterations:
        x_new = T.dot(x) + c
        error = np.linalg.norm(x_new - x, np.inf)
        x = x_new.copy()

        iteration += 1
        table_data.append([iteration, error, *x])

    # Crear tabla de resultados / Create Results Table
    table_columns = ["Iteración", "Error", "x1", "x2", "x3", "x4"]
    table = pd.DataFrame(table_data, columns=table_columns)

    # Imprimir matriz T, vector C y radio espectral
    print("Matriz T:")
    print(T)
    print("\nVector C:")
    print(c)
    print("\nRadio Espectral:", spectral_radius)

    # Imprimir tabla de resultados / Print Results Table
    print("\nTabla de Resultados:")
    print(table)

    return x

# Definir la matriz A y el vector b / Insert Matrix A and b
A = np.array([[4, -1, 0, 3],
              [1, 15.5, 3, 8],
              [0, -1.3, -4, 1.1],
              [14, 5, -2, 30]])

b = np.array([1, 1, 1, 1])

# Solicitar al usuario el vector inicial x0, tolerancia y número máximo de iteraciones / Prompt user for initial vector x0, tolerance and maximum number of iterations
x0 = np.zeros(4)
print("Ingrese el vector inicial x0 (tamaño 4, valores iniciales):")
for i in range(4):
    x0[i] = float(input(f"x0[{i+1}]: "))

tol = float(input("Ingrese la tolerancia: "))
max_iterations = int(input("Ingrese el número máximo de iteraciones: "))

# Llamar a la función para resolver el sistema de ecuaciones / Call the function to resolve the equation system
solution = jacobi(A, b, x0, tol, max_iterations)

# Imprimir la solución final / Print final solution
print("\nSolución x:")
for i, sol in enumerate(solution):
    print(f"x{i+1} = {sol}")
