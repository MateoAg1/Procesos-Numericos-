import numpy as np

def doolittle(A, b):
    n = len(A)
    L = np.zeros((n, n))
    U = np.zeros((n, n))

    # Descomposición de Doolittle / Doolittle Descomposition
    for i in range(n):
        L[i][i] = 1

        for j in range(i, n):
            sum1 = sum(L[i][k] * U[k][j] for k in range(i))
            U[i][j] = A[i][j] - sum1

        for j in range(i+1, n):
            sum2 = sum(L[j][k] * U[k][i] for k in range(i))
            L[j][i] = (A[j][i] - sum2) / U[i][i]

        print("Etapa", i+1)
        print("L:")
        print(L)
        print("U:")
        print(U)

    # Resolución del sistema / System Resolution
    y = np.zeros(n)
    x = np.zeros(n)

    # Sustitución progresiva Ly = b / Progressive Sustitution
    for i in range(n):
        y[i] = (b[i] - np.dot(L[i], y)) / L[i][i]

    # Sustitución regresiva Ux = y / Regresive Sustitution
    for i in range(n-1, -1, -1):
        x[i] = (y[i] - np.dot(U[i], x)) / U[i][i]

    return L, U, x

#Ingresar A y b / Insert A and b
A = np.array([[4, -1, 0, 3],
              [1, 15.5, 3, 8],
              [0, -1.3, -4, 1.1],
              [14, 5, -2, 30]])

b = np.array([1, 1, 1, 1])


#Función Doolittle / Doolittle Function
L, U, solution = doolittle(A, b)

print("\nMatriz de coeficientes A:")
print(A)
print("\nVector de términos independientes b:")
print(b)

print("\nDescomposición de Doolittle:")
print("Matriz L:")
print(L)
print("Matriz U:")
print(U)

print("Solución x:")
print(solution)
