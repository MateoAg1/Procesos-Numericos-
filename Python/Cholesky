import numpy as np

def cholesky(A, b):
    n = len(A)
    L = np.zeros((n, n))
    U = np.zeros((n, n))

    # Para la Descomposicion de Cholesky
    for i in range(n):
        for j in range(i+1):
            if i == j:
                L[i][i] = np.sqrt(A[i][i] - np.sum(L[i][:i]**2))
            else:
                L[i][j] = (A[i][j] - np.sum(L[i][:j]*L[j][:j])) / L[j][j]

        # Imprime matriz L en cada etapa
        print("Matriz L (Etapa ", i+1, "):")
        print(L)

        U = L.T

        # Imprime matriz U en cada etapa
        print("Matriz U (Etapa ", i+1, "):")
        print(U)

    # Realiza la sustituci贸n progresiva
    y = np.zeros(n)
    for i in range(n):
        y[i] = (b[i] - np.sum(L[i][:i]*y[:i])) / L[i][i]

    # Realiza la sustituci贸n regresiva
    x = np.zeros(n)
    for i in range(n-1, -1, -1):
        x[i] = (y[i] - np.sum(U[i][i+1:]*x[i+1:])) / U[i][i]

    # Imprime la soluci贸n x
    print("\nSoluci贸n x:")
    for i, sol in enumerate(x):
        print(f"x{i+1} = {sol}")

# Introducir sistema de ecuaciones de forma matricial:
A = np.array([[10, 3, 0, 1],
              [3, 10, 2, 0],
              [0, 2, 8, 4],
              [1, 0, 4, 6]])

b = np.array([14, 12, 20, 18])

cholesky(A, b)
